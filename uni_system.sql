-- ╔════════════════════════════════════════════════════════════════════╗
-- ║                  GROUP 3 - UNIVERSITY DATABASE ASSIGNMENT         ║
-- ║                  Members: Kitya, Kanika, Mengleang, Rothanak             ║
-- ╚════════════════════════════════════════════════════════════════════╝



-- 🔧 ==================== [ CREATE TABLES ] ==================== 🔧


-- 🧑 students table
create table students
(
    student_id    integer generated by default as identity
        constraint students_pk
            primary key,
    student_name  varchar(100) not null,
    email         varchar(100) not null unique,
    birth_date    date
);

-- 📚 courses table
create table courses
(
    course_id     integer generated by default as identity
        constraint courses_pk
            primary key,
    course_name   varchar(100) not null unique,
    course_code   varchar(20)
);

-- 📖 subjects table
create table subjects
(
    subject_id     integer generated by default as identity
        constraint subjects_pk
            primary key,
    subject_name   varchar(100) not null,
    course_id      integer not null
        constraint subjects_course_id_fk
            references courses(course_id),
    credit_hours   integer
);

-- 🏫 classes table
create table classes
(
    class_id    integer generated by default as identity
        constraint classes_pk
            primary key,
    class_name  varchar(50) not null,
    created_at  timestamp default current_timestamp
);

-- 📝 enrollments table
create table enrollments
(
    enrollment_id integer generated by default as identity
        constraint enrollments_pk
            primary key,
    student_id    integer not null
        constraint enrollments_student_id_fk
            references students(student_id),
    subject_id    integer not null
        constraint enrollments_subject_id_fk
            references subjects(subject_id),
    class_id      integer not null
        constraint enrollments_class_id_fk
            references classes(class_id),
    created_at    timestamp default current_timestamp
);


-- ✅ ==================== [ INSERT DATA ] ====================== ✅

-- Step 1: Insert students
INSERT INTO students(student_name, email, birth_date) VALUES
('Seavleng','seavleng@gmail.com','2006-07-01'),
('Boran','boran@gmail.com','2005-06-15'),
('Sokha','sokha@gmail.com','2004-09-21'),
('Dara','dara@gmail.com','2005-02-12'),
('Sreyneang','sreyneang@gmail.com','2006-03-30');

-- Step 2: Insert courses
INSERT INTO courses (course_name, course_code) VALUES
('Introduction to Computer Science', 'CS101'),
('Data Structures and Algorithms', 'CS102'),
('Database Management Systems', 'CS103'),
('Artificial Intelligence Fundamentals', 'CS104'),
('Computer Networks', 'CS105'),
('Principles of Electrical Engineering', 'EE106'),
('Digital Logic Design', 'EE107'),
('Business Analytics', 'BUS108'),
('Financial Accounting Principles', 'BUS109'),
('Human Anatomy and Physiology', 'BIO110');

-- Step 3: Insert subjects
INSERT INTO subjects (subject_name, course_id, credit_hours) VALUES
('Programming Fundamentals', 1, 4),
('Object-Oriented Programming', 1, 3),
('Database Design', 3, 4),
('Network Security', 5, 3),
('Circuit Theory', 6, 4),
('Digital Systems', 7, 3),
('Financial Management', 9, 3),
('Managerial Accounting', 9, 4),
('Human Biology', 10, 4),
('Algorithms Analysis', 2, 4);

-- Step 4: Insert classes 
INSERT INTO classes (class_name, created_at) VALUES
('CS101-A', CURRENT_TIMESTAMP),
('CS101-B', CURRENT_TIMESTAMP),
('CS103-A', CURRENT_TIMESTAMP),
('CS105-B', CURRENT_TIMESTAMP),
('EE106-A', CURRENT_TIMESTAMP),
('BUS109-A', CURRENT_TIMESTAMP),
('BUS109-B', CURRENT_TIMESTAMP),
('BIO110-A', CURRENT_TIMESTAMP),
('CS102-H', CURRENT_TIMESTAMP),
('CS102-B', CURRENT_TIMESTAMP);

-- Step 5: Insert enrollments
INSERT INTO enrollments (student_id, subject_id, class_id, created_at) VALUES
(1, 1, 1, '2023-09-01 08:00:00'),
(2, 1, 2, '2023-09-01 08:00:00'),
(3, 3, 3, '2023-09-05 09:00:00'),
(1, 2, 1, '2023-09-01 08:00:00'),
(4, 4, 4, '2023-09-02 09:00:00'),
(5, 5, 5, '2023-09-03 09:20:00'),
(2, 7, 6, '2023-09-01 09:00:00'),
(4, 8, 7, '2023-09-01 09:00:00'),
(5, 9, 8, '2023-09-06 09:00:00'),
(3, 10, 9, '2023-09-07 09:00:00');


-- 🔄 ==================== [ UPDATE DATA ] ====================== 🔄
--Chnage and add status
ALTER TABLE enrollments
ADD COLUMN status varchar(20) DEFAULT 'active';


ALTER TABLE enrollments
ADD CONSTRAINT grade_check
CHECK (
    (status = 'completed' AND grade IS NOT NULL)
    OR
    (status IN ('active', 'withdrawn', 'dropped') AND grade IS NULL)
);


-- Update status
ALTER TABLE enrollments
ADD COLUMN grade varchar(5);
UPDATE enrollments SET status = 'completed', grade = 'A'   WHERE enrollment_id = 1;
UPDATE enrollments SET status = 'completed', grade = 'B+' WHERE enrollment_id = 2;
UPDATE enrollments SET status = 'dropped',   grade = NULL WHERE enrollment_id = 3;
UPDATE enrollments SET status = 'completed', grade = 'A-' WHERE enrollment_id = 4;
UPDATE enrollments SET status = 'active',    grade = NULL WHERE enrollment_id = 5;
UPDATE enrollments SET status = 'dropped',   grade = NULL WHERE enrollment_id = 6;
UPDATE enrollments SET status = 'completed', grade = 'B'  WHERE enrollment_id = 7;
UPDATE enrollments SET status = 'completed', grade = 'A'  WHERE enrollment_id = 8;
UPDATE enrollments SET status = 'completed', grade = 'A-' WHERE enrollment_id = 9;
UPDATE enrollments SET status = 'completed', grade = 'B+' WHERE enrollment_id = 10;

UPDATE enrollments
SET status = 'completed',
    grade = 'B+'
WHERE enrollment_id = 5;
UPDATE enrollments
SET status = 'completed',
    grade = 'B+'       
WHERE enrollment_id = 3;
UPDATE enrollments
SET status = 'dropped',
    grade = NULL
WHERE enrollment_id = 2;


-- ❌ ==================== [ DELETE DATA ] ====================== ❌

DELETE FROM enrollments
WHERE enrollment_id = 9;

ALTER TABLE enrollments
ADD COLUMN withdraw_reason text;

ALTER TABLE enrollments
DROP COLUMN withdraw_reason;


-- 🔗 ==================== [ JOIN AND SELECT ] ===================== 🔗

SELECT *
FROM students
JOIN enrollments ON students.student_id = enrollments.student_id
JOIN subjects ON enrollments.subject_id = subjects.subject_id;

SELECT *
FROM students AS s
JOIN enrollments AS e ON s.student_id = e.student_id
JOIN subjects AS sub ON e.subject_id = sub.subject_id;

SELECT
  s.student_id AS student_id,
  s.student_name AS name,
  sub.subject_name AS subject,
  e.status AS status,
  e.grade AS grade
FROM students AS s
JOIN enrollments AS e ON s.student_id = e.student_id
JOIN subjects AS sub ON e.subject_id = sub.subject_id;

SELECT *
FROM students
FULL JOIN enrollments ON students.student_id = enrollments.student_id;

SELECT *
FROM students
LEFT JOIN enrollments ON students.student_id = enrollments.student_id;


SELECT
  e.enrollment_id,
  s.student_name,
  sub.subject_name,
  c.course_name,
  cls.class_name,
  e.status,
  e.grade
FROM enrollments e
JOIN students s ON e.student_id = s.student_id
JOIN subjects sub ON e.subject_id = sub.subject_id
JOIN courses c ON sub.course_id = c.course_id
JOIN classes cls ON e.class_id = cls.class_id;


SELECT
  s.student_name,
  sub.subject_name,
  c.course_name,
  e.grade
FROM enrollments e
JOIN students s ON e.student_id = s.student_id
JOIN subjects sub ON e.subject_id = sub.subject_id
JOIN courses c ON sub.course_id = c.course_id
WHERE e.status = 'completed';
